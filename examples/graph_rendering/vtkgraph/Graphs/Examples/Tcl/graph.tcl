# Demo program for visualizing a general graph (NOT a tree)

package require vtk
package require vtkinteraction

if { [catch {load libvtkGraphsTCL}] != 0 && \
     [catch {load vtkGraphsTCL}] != 0} {
  puts "Could not load Graph package."
  exit 1
}

# ------------------------------------------------------
# Start of pipeline: reader.

vtkGMLReader reader
  reader SetFileName "../../Data/fsm.gml"

# The vtkGraphSpanTree layout module requires two FILTERS as
# input (in addition to the graph).  One filter will extract
# a spanning DAG from the graph (this could of course be a
# spanning tree, a special case).  The second filter is a 
# TREE layout filter that is used to lay out a tree extracted
# from the graph via the spanning DAG filter.  These two input
# filters are constructed below.

# Now define the layout filter for graph.  This uses a filter
# called SpanLayout, which draws a graph by extracting a 
# spanning DAG, restricting this to a spanning tree, and then
# using a tree layout on this subtree.  The DAG extractor and
# tree layout are generated by filters that need to be 
# plugged into the SpanLayout filter.

# NOTE: the cone layout filter has a Compression flag which, 
# when on, places the nodes of the tree closer together than 
# would be ideal if the underlying dataset was really a tree.
# This is useful when the cone layout is used to position 
# the spanning tree of a general graph.

vtkSpanningDAG sd
vtkConeLayout cl
  cl CompressionOn

vtkSpanLayout layout
  layout SetInput [reader GetOutput]
  layout SetSpanningDAG sd
  layout SetTreeLayout cl
  layout SetSpacing 1.0

# ------------------------------------------------------
# Map the graph to geometry.  This particular filter maps 
# edges of the graph to lines.

vtkEdgeGeometry geometry
  geometry SetInput [layout GetOutput]

vtkLookupTable lut
  lut SetNumberOfColors 64
  lut SetHueRange .6367  .01953
  lut SetValueRange .7773 .84375
  lut SetSaturationRange .457 .457
  lut Build

vtkPolyDataMapper mapper
  mapper SetInput [geometry GetOutput]
  mapper SetLookupTable lut
  mapper SetColorModeToMapScalars
  mapper SetScalarRange 0.0 21.0

vtkLODProp3D actor
  actor AddLOD mapper 0.0

# ------------------------------------------------------
# Take positions of real nodes from the layout, and map
# these points to glyphs.

vtkCubeSource cube
  cube SetXLength 1.0
  cube SetYLength 1.0
  cube SetZLength 1.0

vtkNodeGeometry points
  points SetInput [layout GetOutput]

vtkGlyph3D glyphs
  glyphs SetInput [points GetOutput]
  glyphs SetSource [cube GetOutput]
  glyphs SetScaleFactor 0.4

vtkPolyDataMapper glyphMapper
  glyphMapper SetInput [glyphs GetOutput]
  glyphMapper ScalarVisibilityOff

# The Glyph actor determines the color of the
# glyphs, and is set non-pickable.

vtkActor glyphActor
  glyphActor SetMapper glyphMapper
  glyphActor PickableOff
  [glyphActor GetProperty] SetColor 1.0 0.0 0.0


# ------------------------------------------------------
# Renderer, render window, etc.

vtkRenderer ren
  ren AddActor actor
  ren AddActor glyphActor
  ren SetBackground 0.1 0.2 0.4

vtkRenderWindow win
  win AddRenderer ren
  win SetSize 400 400

vtkRenderWindowInteractor iren
  iren SetRenderWindow win
  iren AddObserver UserEvent {wm deiconify .vtkInteract}
  iren Initialize

wm withdraw .



vtkRendererSource rsource
  rsource SetInput ren
  rsource WholeWindowOn

vtkJPEGWriter jpeg
  jpeg SetInput [rsource GetOutput]

